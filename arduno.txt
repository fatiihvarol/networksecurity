#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>

const char* ssid = "Fatih";
const char* password = "12345678";
const char* apiKey = "D9OIDSFTUNIYXVN0";
const char* encryptionKey = "bugercektenguclubirsifrebence";

const int DHTPin = 2;
DHT dht(DHTPin, DHT11);

byte S[256];
byte T[256];

void encryptData(float& temperature, float& humidity) {
  uint32_t* tempInt = reinterpret_cast<uint32_t*>(&temperature);
  uint32_t* humInt = reinterpret_cast<uint32_t*>(&humidity);

  byte i = 0;
  byte j = 0;
  byte tmp = 0;
  byte k = 0;

  for (int x = 0; x < sizeof(uint32_t); ++x) {
    i = (i + 1) % 256;
    j = (j + S[i]) % 256;

    // swap section
    byte b = S[i];
    S[i] = S[j];
    S[j] = b;

    tmp = (S[i] + S[j]) % 256;
    k = S[tmp];

    reinterpret_cast<byte*>(tempInt)[x] ^= k;
    reinterpret_cast<byte*>(humInt)[x] ^= k;
  }
}

void permute() {
  byte j = 0;
  byte tmp;
  for (int i = 0; i < 256; i++) {
    j = (j + S[i] + T[i]) % 256;
    tmp = S[i];
    S[i] = S[j];
    S[j] = tmp;
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("\nConnecting");

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(100);
  }

  Serial.println("\nConnected to the WiFi network");
  Serial.print("Local ESP32 IP: ");
  Serial.println(WiFi.localIP());

  dht.begin();

  // Initialize S and T arrays for RC4
  for (int i = 0; i < 256; i++) {
    S[i] = i;
    T[i] = encryptionKey[i % strlen(encryptionKey)];
  }

  permute();
}

void loop() {
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("DHT11 sensor data is invalid!");
    delay(2000);
    return;
  }

  // Encrypt the data using RC4
  encryptData(temperature, humidity);

  Serial.println("Encrypted Temperature: " + String(temperature));
  Serial.println("Encrypted Humidity: " + String(humidity));

  // ThingSpeak update
  String url = "https://api.thingspeak.com/update?api_key=" + String(apiKey) +
               "&field1=" + String(temperature) + "&field2=" + String(humidity);

  HTTPClient http;
  http.begin(url);

  int httpCode = http.GET();
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Data sent to ThingSpeak successfully. Response: " + payload);
  } else {
    Serial.println("Failed to send data to ThingSpeak. HTTP code: " + String(httpCode));
  }

  http.end();

  delay(2000);
}
